import { getLocation, parseTree, findNodeAtOffset, getNodePath, Node, JSONPath } from "jsonc-parser";
import * as vscode from "vscode";

/**
 * Retourne le chemin JSON (JSONPath) √† une position donn√©e dans un document.
 * G√®re les cas o√π le curseur est sur une valeur, une cl√©, ou entre les guillemets d'une cl√©.
 */
export function getJsonPathAt(document: vscode.TextDocument, position: vscode.Position): JSONPath {
    const text = document.getText(); // R√©cup√®re le texte complet du document
    const offset = document.offsetAt(position); // Convertit la position en offset
    const root = parseTree(text); // Parse le texte JSON pour obtenir l'arbre syntaxique
    if (!root) { // Si l'arbre n'est pas valide, retourne un chemin vide
        return [];
    }

    const node = findNodeAtOffset(root, offset, true); // Trouve le n≈ìud √† l'offset donn√©

    if (!node) { // Si aucun n≈ìud n'est trouv√©, retourne un chemin vide
        return [];
    }

    const location = getLocation(text, offset); // Obtient la localisation du curseur dans le texte
 
    /**
     * Cas : le curseur est dans une **cl√© de propri√©t√©** (entre les guillemets)
     * Ex: {
     *  "format_|"
     * }}
     * Renvoie : ["format_"]
     */
    if (location.isAtPropertyKey && node.type === "string") { // Si le curseur est sur une cl√©  
        const property = node.parent; // // On r√©cup√®re le n≈ìud parent, qui est une propri√©t√© (cl√© + valeur)

        if (property?.type === "property" && property.children?.[0] === node) {
            // V√©rifie que ce n≈ìud est bien la **cl√©** de la propri√©t√©
            const parentPath = getNodePath(property.parent!); // On r√©cup√®re le chemin de l'objet parent
            return [...parentPath, node.value]; // On renvoie ce chemin + la cl√© en cours d‚Äô√©criture
        }
    }

    /**
     * Cas : le curseur est sur une **valeur** (apr√®s les deux-points)
     * Ex: {
     *  "format_version": "1.2|0.30"
     * }
     * Renvoie : ["format_version", "1.20.30"]
     */
    if (node.parent?.type === "property" && node.parent.children?.[1] === node) { // Si le parent du noeud est une propri√©t√© (cl√© + valeur), et que son enfant valeur est le noeud actuel
        const parentPath = getNodePath(node.parent.parent!); // On r√©cup√®re le chemin de l'objet parent
        const key = node.parent.children?.[0]?.value; // On r√©cup√®re la cl√© de la propri√©t√©
        return [...parentPath, key]; // On renvoie ce chemin + la cl√© de la propri√©t√©
    }

    /**
     * Cas : Le curseur sur la **cl√©** (gauche d‚Äôune propri√©t√©, `"cl√©":`)
     * Ex: {
     *  "format_version": |"1.20.30"
     * }
     */
    if (node.parent?.type === "property" && node.parent.children?.[0] === node) { // Si le parent du noeud est une propri√©t√© (cl√© + valeur), et que son enfant cl√© est le noeud actuel
        const parentPath = getNodePath(node.parent.parent!); // On r√©cup√®re le chemin de l'objet parent
        const key = node.value; // On r√©cup√®re la cl√© de la propri√©t√©
        return [...parentPath, key]; // On renvoie ce chemin + la cl√© de la propri√©t√©
    }

    // üìå 4. Par d√©faut (curseur sur un objet, tableau, etc.)
    /**
     * Cas : le curseur est sur un **objet** ou un **tableau**
     */
    return getNodePath(node); // Renvoie le chemin du n≈ìud actuel, qui est un objet ou un tableau ou etc.
}